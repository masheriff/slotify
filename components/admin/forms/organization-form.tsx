// components/admin/forms/organization-form.tsx - ORIGINAL STRUCTURE + isActive fix only
"use client";

import { useState, useCallback, useMemo, useRef, useEffect } from "react";
import { useRouter } from "next/navigation";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm, SubmitHandler } from "react-hook-form";
import { z } from "zod";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Checkbox } from "@/components/ui/checkbox";
import { Loader2, Check, AlertCircle } from "lucide-react";
import { toast } from "sonner";
import { cn } from "@/lib/utils";
import { FileUpload } from "@/components/ui/file-upload";
import {
  createOrganization,
  updateOrganization,
  getOrganizationById,
} from "@/actions/organization-actions";
import { deleteFile } from "@/actions/file-upload-actions";
import {
  getErrorMessage,
  ServerActionError,
  ServerActionResponse,
} from "@/types/server-actions.types";
import { Switch } from "@/components/ui/switch";
import { OrganizationFormProps } from "@/types";
import { OrganizationFormData, organizationFormSchema, OrganizationInput } from "@/schemas";

// Local slug checker
const checkSlugAvailabilityAPI = async (
  slug: string,
  excludeOrgId?: string
): Promise<{ available: boolean; suggestedSlug?: string }> => {
  try {
    const params = new URLSearchParams({ slug });
    if (excludeOrgId) {
      params.append("excludeOrgId", excludeOrgId);
    }

    const response = await fetch(`/api/organizations/check-slug?${params}`);
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}`);
    }

    const result = await response.json();
    return result;
  } catch (error) {
    console.error("Slug availability check failed:", error);
    return { available: false };
  }
};

// FIXED: Form schema that handles both create and edit modes

type SlugStatus = "checking" | "available" | "taken" | null;


export function OrganizationForm({
  mode,
  organizationId,
  onSuccess,
}: OrganizationFormProps) {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(false);
  const [slugStatus, setSlugStatus] = useState<SlugStatus>(null);
  const debounceTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const isSlugAutoGeneratedRef = useRef(mode === "create");

  // Form with validation
  const form = useForm<OrganizationFormData>({
    resolver: zodResolver(organizationFormSchema),
    defaultValues: {
      name: "",
      slug: "",
      logo: "",
      type: "client",
      contactEmail: "",
      contactPhone: "",
      addressLine1: "",
      addressLine2: "",
      city: "",
      state: "",
      postalCode: "",
      country: "",
      timezone: "",
      hipaaOfficer: "",
      businessAssociateAgreement: false,
      dataRetentionYears: "",
      isActive: true,
    },
  });

  // ADDED: Watch form values for admin organization handling
  const watchedType = form.watch("type");
  const watchedIsActive = form.watch("isActive");

  // Load organization data for edit mode
  useEffect(() => {
    if (mode !== "edit" || !organizationId) return;

    const loadOrganizationData = async () => {
      try {
        setIsLoading(true);

        const response = await getOrganizationById(organizationId);

        if (response.success && response.data) {
          const org = response.data;
          const metadata = org.metadata || {};

          form.reset({
            name: org.name || "",
            slug: org.slug || "",
            logo: org.logo || "",
            type: metadata.type || "client",
            contactEmail: metadata.contactEmail || "",
            contactPhone: metadata.contactPhone || "",
            addressLine1: metadata.addressLine1 || "",
            addressLine2: metadata.addressLine2 || "",
            city: metadata.city || "",
            state: metadata.state || "",
            postalCode: metadata.postalCode || "",
            country: metadata.country || "",
            timezone: metadata.timezone || "",
            hipaaOfficer: metadata.hipaaOfficer || "",
            businessAssociateAgreement:
              metadata.businessAssociateAgreement || false,
            dataRetentionYears: metadata.dataRetentionYears || "",
            isActive: metadata.isActive !== false,
          });

          // Disable auto-generation for existing orgs
          isSlugAutoGeneratedRef.current = false;
        } else {
          toast.error(getErrorMessage(response.error || "Failed to load organization"));
          router.push("/5am-corp/admin/organizations");
        }
      } catch (error) {
        console.error("Error loading organization:", error);
        toast.error("Failed to load organization data");
        router.push("/5am-corp/admin/organizations");
      } finally {
        setIsLoading(false);
      }
    };

    loadOrganizationData();
  }, [mode, organizationId, form]);

  // Reset auto-generation flag when mode/org changes
  useEffect(() => {
    isSlugAutoGeneratedRef.current = mode === "create";
  }, [mode, organizationId]);

  // Slug generation from name
  const generateSlug = useCallback((name: string): string => {
    return name
      .toLowerCase()
      .replace(/[^a-z0-9\s-]/g, "")
      .replace(/\s+/g, "-")
      .replace(/--+/g, "-")
      .trim();
  }, []);

  // Auto-generate slug when name changes (only in create mode)
  const name = form.watch("name");

  useEffect(() => {
    if (mode === "create" && name && isSlugAutoGeneratedRef.current) {
      const newSlug = generateSlug(name);
      form.setValue("slug", newSlug, { shouldValidate: true });
    }
  }, [name, mode, form, generateSlug]);

  // ADDED: Prevent admin organizations from being deactivated
  useEffect(() => {
    if (watchedType === "admin" && !watchedIsActive) {
      form.setValue("isActive", true);
      toast.error("Admin organizations cannot be deactivated");
    }
  }, [watchedType, watchedIsActive, form]);

  // Debounced slug availability check
  const checkSlugAvailability = useCallback(
    async (slugToCheck: string) => {
      if (!slugToCheck || slugToCheck.length < 2) {
        setSlugStatus(null);
        return;
      }

      if (debounceTimeoutRef.current) {
        clearTimeout(debounceTimeoutRef.current);
      }

      debounceTimeoutRef.current = setTimeout(async () => {
        setSlugStatus("checking");
        try {
          const result = await checkSlugAvailabilityAPI(
            slugToCheck,
            organizationId
          );
          setSlugStatus(result.available ? "available" : "taken");

          if (!result.available && result.suggestedSlug) {
            toast.info(
              `Slug "${slugToCheck}" is taken. Try "${result.suggestedSlug}"`
            );
          }
        } catch (error) {
          console.error("Slug check failed:", error);
          setSlugStatus(null);
        }
      }, 500);
    },
    [organizationId]
  );

  const slug = form.watch("slug");

  useEffect(() => {
    if (slug) {
      checkSlugAvailability(slug);
    }
  }, [slug, checkSlugAvailability]);

  // Logo upload handler using API route instead of server action
  const handleLogoUpload = useCallback(
    async (
      file: File
    ): Promise<{ success: boolean; url?: string; error?: string }> => {
      try {
        const formData = new FormData();
        formData.append("file", file);

        // Use API route instead of server action to avoid FormData issues
        const response = await fetch("/api/upload/organization-logo", {
          method: "POST",
          body: formData,
        });

        const result = await response.json();

        if (result.success && result.url) {
          form.setValue("logo", result.url);
          toast.success("Logo uploaded successfully!");
          return result;
        } else {
          toast.error(result.error || "Failed to upload logo");
          return result;
        }
      } catch (error) {
        console.error("Logo upload error:", error);
        const errorMessage = "Failed to upload logo";
        toast.error(errorMessage);
        return { success: false, error: errorMessage };
      }
    },
    [form]
  );

  const handleLogoRemove = useCallback(
    async (url: string): Promise<{ success: boolean; error?: string }> => {
      try {
        const result = await deleteFile(url);
        if (result.success) {
          form.setValue("logo", "");
          toast.success("Logo removed successfully!");
          return result;
        } else {
          toast.error(result.error || "Failed to remove logo");
          return result;
        }
      } catch (error) {
        console.error("Logo remove error:", error);
        const errorMessage = "Failed to remove logo";
        toast.error(errorMessage);
        return { success: false, error: errorMessage };
      }
    },
    [form]
  );

  // Slug status icon
  const slugStatusIcon = useMemo(() => {
    switch (slugStatus) {
      case "checking":
        return <Loader2 className="h-4 w-4 animate-spin text-gray-400" />;
      case "available":
        return <Check className="h-4 w-4 text-green-500" />;
      case "taken":
        return <AlertCircle className="h-4 w-4 text-red-500" />;
      default:
        return null;
    }
  }, [slugStatus]);

  // Enhanced form submission
  const onSubmit: SubmitHandler<OrganizationFormData> = async (data) => {
    try {
      setIsLoading(true);

      // ADDED: Prevent submitting if admin org is being deactivated
      if (data.type === "admin" && !data.isActive) {
        toast.error("Admin organizations cannot be deactivated");
        return;
      }

      // Clean logo field
      const cleanedLogo = data.logo && data.logo.trim() !== "" 
        ? data.logo : "";

      // FIXED: Proper data structure for server
      const organizationData: OrganizationInput = {
        name: data.name,
        slug: data.slug,
        logo: cleanedLogo,
        metadata: {
          type: data.type,
          contactEmail: data.contactEmail,
          contactPhone: data.contactPhone,
          addressLine1: data.addressLine1,
          addressLine2: data.addressLine2 || "",
          city: data.city,
          state: data.state,
          postalCode: data.postalCode,
          country: data.country,
          timezone: data.timezone,
          hipaaOfficer: data.hipaaOfficer,
          businessAssociateAgreement: data.businessAssociateAgreement,
          dataRetentionYears: data.dataRetentionYears,
          isActive: data.isActive,
          settings: {
            features: {
              multiTenant: false,
              advancedReporting: false,
              apiAccess: false,
              customBranding: false,
            },
            billing: {
              plan: "basic",
              status: "active",
            },
            notifications: {
              email: true,
              sms: false,
            },
          },
        },
        createdAt: "",
      };

      let result: ServerActionResponse;

      if (mode === "create") {
        result = await createOrganization(organizationData);
      } else {
        if (!organizationId) {
          throw new Error("Organization ID is required for updates");
        }
        result = await updateOrganization(organizationId, organizationData);
      }

      if (result.success) {
        const successMessage =
          mode === "create"
            ? "Organization created successfully!"
            : "Organization updated successfully!";

        toast.success(successMessage);

        // Navigate on success
        if (onSuccess) {
          onSuccess();
        } else {
          router.push("/5am-corp/admin/organizations");
          router.refresh();
        }
      } else {
        // Handle validation errors
        if (result.validationErrors && result.validationErrors.length > 0) {
          const fieldNames: Array<keyof OrganizationFormData> = [
            "name",
            "slug",
            "logo",
            "type",
            "contactEmail",
            "contactPhone",
            "addressLine1",
            "addressLine2",
            "city",
            "state",
            "postalCode",
            "country",
            "timezone",
            "hipaaOfficer",
            "businessAssociateAgreement",
            "dataRetentionYears",
            "isActive",
          ];

          result.validationErrors.forEach((error) => {
            let fieldPath = error.path?.join(".") || "general";

            // Map server paths to form paths
            if (fieldPath.startsWith("metadata.")) {
              fieldPath = fieldPath.replace("metadata.", "");
            }

            if (fieldNames.includes(fieldPath as keyof OrganizationFormData)) {
              form.setError(fieldPath as keyof OrganizationFormData, {
                type: "server",
                message: error.message,
              });
            }
          });

          toast.error("Please check the form for errors");
        } else {
          toast.error(getErrorMessage(result.error || "Failed to save organization"));
        }
      }
    } catch (error) {
      console.error("Form submission error:", error);
      toast.error(getErrorMessage(error as unknown as ServerActionError));
    } finally {
      setIsLoading(false);
    }
  };

  if (isLoading && mode === "edit") {
    return (
      <div className="flex items-center justify-center py-8">
        <Loader2 className="h-8 w-8 animate-spin" />
        <span className="ml-2">Loading organization...</span>
      </div>
    );
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
        {/* Basic Information */}
        <Card>
          <CardHeader>
            <CardTitle>Basic Information</CardTitle>
            <CardDescription>
              Core details about the organization
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <FormField
                control={form.control}
                name="name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Organization Name</FormLabel>
                    <FormControl>
                      <Input placeholder="Hart Medical Associates" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="slug"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>URL Slug</FormLabel>
                    <FormControl>
                      <div className="relative">
                        <Input
                          placeholder="hart-medical"
                          {...field}
                          className={cn(
                            "pr-10",
                            slugStatus === "taken" && "border-red-500",
                            slugStatus === "available" && "border-green-500"
                          )}
                          onChange={(e) => {
                            field.onChange(e);
                            // Stop auto-generation when user manually edits
                            if (mode === "create") {
                              isSlugAutoGeneratedRef.current = false;
                            }
                          }}
                        />
                        <div className="absolute inset-y-0 right-0 flex items-center pr-3">
                          {slugStatusIcon}
                        </div>
                      </div>
                    </FormControl>
                    <FormDescription>
                      Used in URLs. Only lowercase letters, numbers, and hyphens.
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>

            <FormField
              control={form.control}
              name="logo"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Organization Logo</FormLabel>
                  <FormControl>
                    <FileUpload
                      onUpload={handleLogoUpload}
                      onRemove={handleLogoRemove}
                      accept="image/*"
                      maxSize={5 * 1024 * 1024} // 5MB
                      value={field.value}
                      disabled={isLoading}
                      placeholder="Upload organization logo (optional)"
                    />
                  </FormControl>
                  <FormDescription>
                    Upload your organization logo (max 5MB)
                  </FormDescription>
                  <FormMessage />
                </FormItem>
              )}
            />

            {/* ADDED: Show isActive toggle for edit mode, disable for admin orgs */}
            {mode === "edit" && (
              <FormField
                control={form.control}
                name="isActive"
                render={({ field }) => (
                  <FormItem className="flex flex-row items-center justify-between rounded-lg border p-4">
                    <div className="space-y-0.5">
                      <FormLabel className="text-base">Organization Status</FormLabel>
                      <FormDescription>
                        {watchedType === "admin" 
                          ? "Admin organizations must remain active"
                          : "Disabled organizations cannot be accessed by members."
                        }
                      </FormDescription>
                    </div>
                    <FormControl>
                      <Switch
                        checked={field.value}
                        onCheckedChange={field.onChange}
                        disabled={watchedType === "admin"}
                      />
                    </FormControl>
                  </FormItem>
                )}
              />
            )}

            {/* Hidden organization type field - but accessible for edit mode */}
            <FormField
              control={form.control}
              name="type"
              render={({ field }) => (
                <FormItem className="hidden">
                  <FormLabel>Organization Type</FormLabel>
                  <Select onValueChange={field.onChange} value={field.value}>
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="Select organization type" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      <SelectItem value="admin">Admin Organization</SelectItem>
                      <SelectItem value="client">
                        Client Organization
                      </SelectItem>
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />
          </CardContent>
        </Card>

        <div className="grid grid-cols-1 md:grid-cols-10 gap-6">
          {/* Contact Information */}
          <Card className="col-span-3">
            <CardHeader>
              <CardTitle>Contact Information</CardTitle>
              <CardDescription>
                Primary contact details for the organization
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="grid grid-cols-1 gap-6">
                <FormField
                  control={form.control}
                  name="contactEmail"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Contact Email</FormLabel>
                      <FormControl>
                        <Input
                          type="email"
                          placeholder="contact@hartmedical.com"
                          {...field}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="contactPhone"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Contact Phone</FormLabel>
                      <FormControl>
                        <Input
                          type="tel"
                          placeholder="+1 (555) 123-4567"
                          {...field}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
            </CardContent>
          </Card>

          {/* Address Information */}
          <Card className="col-span-4">
            <CardHeader>
              <CardTitle>Address Information</CardTitle>
              <CardDescription>
                Physical location details
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="grid grid-cols-1 gap-6">
                <FormField
                  control={form.control}
                  name="addressLine1"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Address Line 1</FormLabel>
                      <FormControl>
                        <Input placeholder="123 Medical Center Drive" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="addressLine2"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Address Line 2 (Optional)</FormLabel>
                      <FormControl>
                        <Input placeholder="Suite 200" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <div className="grid grid-cols-2 gap-4">
                  <FormField
                    control={form.control}
                    name="city"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>City</FormLabel>
                        <FormControl>
                          <Input placeholder="New York" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="state"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>State/Province</FormLabel>
                        <FormControl>
                          <Input placeholder="NY" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <FormField
                    control={form.control}
                    name="postalCode"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Postal Code</FormLabel>
                        <FormControl>
                          <Input placeholder="10001" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="country"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Country</FormLabel>
                        <FormControl>
                          <Input placeholder="United States" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>

                <FormField
                  control={form.control}
                  name="timezone"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Timezone</FormLabel>
                      <Select onValueChange={field.onChange} value={field.value}>
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select timezone" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="America/New_York">
                            Eastern Time (EST/EDT)
                          </SelectItem>
                          <SelectItem value="America/Chicago">
                            Central Time (CST/CDT)
                          </SelectItem>
                          <SelectItem value="America/Denver">
                            Mountain Time (MST/MDT)
                          </SelectItem>
                          <SelectItem value="America/Los_Angeles">
                            Pacific Time (PST/PDT)
                          </SelectItem>
                          <SelectItem value="America/Anchorage">
                            Alaska Time (AKST/AKDT)
                          </SelectItem>
                          <SelectItem value="Pacific/Honolulu">
                            Hawaii Time (HST)
                          </SelectItem>
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
            </CardContent>
          </Card>

          {/* HIPAA Compliance */}
          <Card className="col-span-3">
            <CardHeader>
              <CardTitle>HIPAA Compliance</CardTitle>
              <CardDescription>
                Required healthcare compliance information
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <FormField
                control={form.control}
                name="hipaaOfficer"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>HIPAA Officer</FormLabel>
                    <FormControl>
                      <Input placeholder="John Doe, M.D." {...field} />
                    </FormControl>
                    <FormDescription>
                      Name of the designated HIPAA compliance officer
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="dataRetentionYears"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Data Retention Period</FormLabel>
                    <Select onValueChange={field.onChange} value={field.value}>
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Select retention period" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="3">3 Years</SelectItem>
                        <SelectItem value="5">5 Years</SelectItem>
                        <SelectItem value="7">7 Years</SelectItem>
                        <SelectItem value="10">10 Years</SelectItem>
                        <SelectItem value="permanent">Permanent</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormDescription>
                      How long to retain patient data
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="businessAssociateAgreement"
                render={({ field }) => (
                  <FormItem className="flex flex-row items-start space-x-3 space-y-0">
                    <FormControl>
                      <Checkbox
                        checked={field.value}
                        onCheckedChange={field.onChange}
                      />
                    </FormControl>
                    <div className="space-y-1 leading-none">
                      <FormLabel>Business Associate Agreement</FormLabel>
                      <FormDescription>
                        I confirm that a valid Business Associate Agreement is
                        in place for this organization
                      </FormDescription>
                    </div>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </CardContent>
          </Card>
        </div>

        {/* Form Actions */}
        <div className="flex items-center justify-end gap-4">
          <Button
            type="button"
            variant="outline"
            onClick={() => router.push("/5am-corp/admin/organizations")}
            disabled={isLoading}
          >
            Cancel
          </Button>
          <Button
            type="submit"
            disabled={isLoading || slugStatus === "taken"}
          >
            {isLoading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
            {mode === "create" ? "Create Organization" : "Update Organization"}
          </Button>
        </div>
      </form>
    </Form>
  );
}