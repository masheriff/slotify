// components/admin/forms/organization-form.tsx
"use client";

import { useState, useCallback, useMemo, useRef, useEffect } from "react";
import { useRouter } from "next/navigation";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm, SubmitHandler } from "react-hook-form";
import { z } from "zod";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Checkbox } from "@/components/ui/checkbox";
import { Loader2, Check, AlertCircle } from "lucide-react";
import { toast } from "sonner";
import { cn } from "@/lib/utils";
import { FileUpload } from "@/components/ui/file-upload";
import {
  createOrganization,
  updateOrganization,
  getOrganizationById,
  OrganizationInput,
} from "@/actions/organization-actions";
import {
  uploadOrganizationLogo,
  deleteFile,
} from "@/actions/file-upload-actions";
import {
  getErrorMessage,
  ServerActionResponse,
} from "@/types/server-actions.types";
import { OrganizationFormData } from "@/types";

// Create a local slug checker to avoid import conflicts
const checkSlugAvailabilityAPI = async (
  slug: string,
  excludeOrgId?: string
): Promise<{ available: boolean; suggestedSlug?: string }> => {
  try {
    const params = new URLSearchParams({ slug });
    if (excludeOrgId) {
      params.append("excludeOrgId", excludeOrgId);
    }

    const response = await fetch(`/api/organizations/check-slug?${params}`);

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}`);
    }

    const result = await response.json();
    return result;
  } catch (error) {
    console.error("Slug availability check failed:", error);
    return { available: false };
  }
};

// Enhanced form schema with proper validation
const organizationFormSchema = z.object({
  name: z.string().min(2, "Organization name must be at least 2 characters"),
  slug: z
    .string()
    .min(2, "Slug must be at least 2 characters")
    .regex(
      /^[a-z0-9-]+$/,
      "Slug can only contain lowercase letters, numbers, and hyphens"
    ),
  logo: z
    .string()
    .optional()
    .refine((val) => {
      if (!val || val.trim() === "") return true;
      return val.startsWith("/") || val.startsWith("http");
    }, "Logo must be a valid URL or path"),
  type: z.literal("client"),

  // Contact Information
  contactEmail: z.string().email("Please enter a valid email address"),
  contactPhone: z.string().min(10, "Please enter a valid phone number"),

  // Address Information
  addressLine1: z.string().min(1, "Address line 1 is required"),
  addressLine2: z.string().optional(),
  city: z.string().min(1, "City is required"),
  state: z.string().min(1, "State/Province is required"),
  postalCode: z.string().min(1, "Postal code is required"),
  country: z.string().min(1, "Country is required"),
  timezone: z.string().min(1, "Timezone is required"),

  // HIPAA Compliance
  hipaaOfficer: z.string().min(1, "HIPAA Officer is required"),
  businessAssociateAgreement: z
    .boolean()
    .refine(
      (val) => val === true,
      "Business Associate Agreement must be signed"
    ),
  dataRetentionYears: z.string().min(1, "Data retention period is required"),
});

type FormData = z.infer<typeof organizationFormSchema>;

type SlugStatus = "checking" | "available" | "taken" | null;

interface OrganizationFormProps {
  mode: "create" | "edit";
  organizationId?: string;
  onSuccess?: () => void;
}

export function OrganizationForm({
  mode,
  organizationId,
  onSuccess,
}: OrganizationFormProps) {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(false);
  const [slugStatus, setSlugStatus] = useState<SlugStatus>(null);
  // Use useRef to persist auto-generation state across re-renders
  const isSlugAutoGeneratedRef = useRef(mode === "create");
  const debounceTimeoutRef = useRef<NodeJS.Timeout | null>(null);

  // Form setup with default values
  const form = useForm<FormData>({
    resolver: zodResolver(organizationFormSchema),
    defaultValues: {
      name: "",
      slug: "",
      logo: "",
      type: "client", // Default to client
      contactEmail: "",
      contactPhone: "",
      addressLine1: "",
      addressLine2: "",
      city: "",
      state: "",
      postalCode: "",
      country: "United States",
      timezone: "America/New_York",
      hipaaOfficer: "",
      businessAssociateAgreement: false,
      dataRetentionYears: "",
    },
  });

  // Reset auto-generation flag when mode/org changes
  useEffect(() => {
    isSlugAutoGeneratedRef.current = mode === "create";
  }, [mode, organizationId]);

  // Load existing organization data in edit mode
  useEffect(() => {
    const loadOrganizationData = async () => {
      if (mode === "edit" && organizationId) {
        setIsLoading(true);
        try {
          const result = await getOrganizationById(organizationId);
          if (result.success && result.data) {
            const org = result.data;
            const metadata = org.metadata || {};

            // Populate form with existing data
            form.reset({
              name: org.name || "",
              slug: org.slug || "",
              logo: org.logo || "",
              type: metadata.type || "client",
              contactEmail: metadata.contactEmail || "",
              contactPhone: metadata.contactPhone || "",
              addressLine1: metadata.addressLine1 || "",
              addressLine2: metadata.addressLine2 || "",
              city: metadata.city || "",
              state: metadata.state || "",
              postalCode: metadata.postalCode || "",
              country: metadata.country || "United States",
              timezone: metadata.timezone || "America/New_York",
              hipaaOfficer: metadata.hipaaOfficer || "",
              businessAssociateAgreement:
                metadata.businessAssociateAgreement || false,
              dataRetentionYears: metadata.dataRetentionYears || "",
            });
          }
        } catch (error) {
          console.error("Failed to load organization data:", error);
          toast.error("Failed to load organization data");
        } finally {
          setIsLoading(false);
        }
      }
    };

    loadOrganizationData();
  }, [mode, organizationId, form]);

  // Slug generation from name
  const generateSlug = useCallback((name: string): string => {
    return name
      .toLowerCase()
      .replace(/[^a-z0-9\s-]/g, "")
      .replace(/\s+/g, "-")
      .replace(/--+/g, "-")
      .trim();
  }, []);

  // Auto-generate slug when name changes (only in create mode and when auto-generated)
  const name = form.watch("name");

  useEffect(() => {
    if (mode === "create" && name && isSlugAutoGeneratedRef.current) {
      const newSlug = generateSlug(name);
      form.setValue("slug", newSlug, { shouldValidate: true });
    }
  }, [name, mode, form, generateSlug]);

  // Debounced slug availability check
  const checkSlugAvailability = useCallback(
    async (slugToCheck: string) => {
      if (!slugToCheck || slugToCheck.length < 2) {
        setSlugStatus(null);
        return;
      }

      // Clear existing timeout
      if (debounceTimeoutRef.current) {
        clearTimeout(debounceTimeoutRef.current);
      }

      // Set new timeout
      debounceTimeoutRef.current = setTimeout(async () => {
        setSlugStatus("checking");
        try {
          const result = await checkSlugAvailabilityAPI(
            slugToCheck,
            organizationId
          );
          setSlugStatus(result.available ? "available" : "taken");

          if (!result.available && result.suggestedSlug) {
            toast.info(
              `Slug "${slugToCheck}" is taken. Try "${result.suggestedSlug}"`
            );
          }
        } catch (error) {
          console.error("Slug check failed:", error);
          setSlugStatus(null);
        }
      }, 500);
    },
    [organizationId]
  );

  // Watch slug changes and trigger availability check
  const slug = form.watch("slug");

  useEffect(() => {
    if (slug && slug.length >= 2) {
      checkSlugAvailability(slug);
    } else {
      setSlugStatus(null);
    }

    // Cleanup timeout on unmount
    return () => {
      if (debounceTimeoutRef.current) {
        clearTimeout(debounceTimeoutRef.current);
      }
    };
  }, [slug, checkSlugAvailability]);

  // Slug status icon
  const slugStatusIcon = useMemo(() => {
    switch (slugStatus) {
      case "checking":
        return (
          <Loader2 className="h-4 w-4 animate-spin text-muted-foreground" />
        );
      case "available":
        return <Check className="h-4 w-4 text-green-600" />;
      case "taken":
        return <AlertCircle className="h-4 w-4 text-red-600" />;
      default:
        return null;
    }
  }, [slugStatus]);

  // Form submission handler
  // Fix for the onSubmit function in organization-form.tsx

  // Replace the onSubmit function with this implementation:
  const onSubmit: SubmitHandler<OrganizationFormData> = async (data) => {
    try {
      setIsLoading(true);
      console.log("Form submission data:", data);

      // Handle empty logo field
      // Note: We're now using "" for empty values rather than undefined
      // This ensures consistent handling between create and edit modes
      const cleanedLogo = data.logo && data.logo.trim() !== "" ? data.logo : "";

      // Extract metadata fields
      const metadata = {
        type: data.type,
        contactEmail: data.contactEmail,
        contactPhone: data.contactPhone,
        addressLine1: data.addressLine1,
        addressLine2: data.addressLine2 || "",
        city: data.city,
        state: data.state,
        postalCode: data.postalCode,
        country: data.country,
        timezone: data.timezone,
        hipaaOfficer: data.hipaaOfficer || "",
        businessAssociateAgreement: data.businessAssociateAgreement,
        dataRetentionYears: data.dataRetentionYears,
        isActive: true,
        settings: {
          features: {
            multiTenant: false,
            advancedReporting: false,
            apiAccess: false,
            customBranding: false,
          },
          billing: {
            plan: "basic",
            status: "active",
          },
          notifications: {
            email: true,
            sms: false,
          },
        },
      };

      const organizationData: OrganizationInput = {
        name: data.name,
        slug: data.slug,
        logo: cleanedLogo, // Using empty string instead of undefined
        metadata,
        createdAt: "",
      };

      // Log the data being sent for debugging
      console.log(
        `${mode} mode - sending data:`,
        JSON.stringify(organizationData)
      );

      let result: ServerActionResponse;

      if (mode === "create") {
        result = await createOrganization(organizationData);
      } else {
        // For edit mode, ensure organizationId is available
        if (!organizationId) {
          throw new Error("Organization ID is required for updates");
        }
        result = await updateOrganization(organizationId, organizationData);
      }

      console.log(`${mode} result:`, result);

      if (result.success) {
        toast.success(
          mode === "create"
            ? "Organization created successfully!"
            : "Organization updated successfully!"
        );

        if (onSuccess) {
          onSuccess();
        } else {
          router.push("/admin/organizations");
          router.refresh();
        }
      } else {
        console.error("Submission error:", result.error);

        // Handle validation errors
        if (result.validationErrors) {
          result.validationErrors.forEach((error) => {
            const fieldPath = error.path?.join(".") || "general";
            form.setError(fieldPath as any, {
              type: "manual",
              message: error.message,
            });
          });
        } else {
          toast.error(getErrorMessage(result.error ?? "An error occurred"));
        }
      }
    } catch (error) {
      console.error("Unexpected error:", error);
      const errorMessage =
        error instanceof Error ? error.message : "An unexpected error occurred";
      toast.error(errorMessage);
    } finally {
      setIsLoading(false);
    }
  };

  // Logo upload handler
  const handleLogoUpload = useCallback(
    async (
      file: File
    ): Promise<{ success: boolean; url?: string; error?: string }> => {
      try {
        const formData = new FormData();
        formData.append("file", file);

        const result = await uploadOrganizationLogo(formData);
        if (result.success && result.url) {
          form.setValue("logo", result.url);
          toast.success("Logo uploaded successfully!");
          return result;
        } else {
          toast.error(result.error || "Failed to upload logo");
          return result;
        }
      } catch (error) {
        console.error("Logo upload error:", error);
        const errorMessage = "Failed to upload logo";
        toast.error(errorMessage);
        return { success: false, error: errorMessage };
      }
    },
    [form]
  );

  // Logo remove handler
  const handleLogoRemove = useCallback(
    async (url: string): Promise<{ success: boolean; error?: string }> => {
      try {
        const result = await deleteFile(url);
        if (result.success) {
          form.setValue("logo", "");
          toast.success("Logo removed successfully!");
          return result;
        } else {
          toast.error(result.error || "Failed to remove logo");
          return result;
        }
      } catch (error) {
        console.error("Logo remove error:", error);
        const errorMessage = "Failed to remove logo";
        toast.error(errorMessage);
        return { success: false, error: errorMessage };
      }
    },
    [form]
  );

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
        {/* Basic Information */}
        <Card>
          <CardHeader>
            <CardTitle>Basic Information</CardTitle>
            <CardDescription>
              Core details about the organization
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="grid grid-cols-1 gap-6">
                <FormField
                  control={form.control}
                  name="name"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Organization Name</FormLabel>
                      <FormControl>
                        <Input
                          placeholder="Enter organization name"
                          {...field}
                        />
                      </FormControl>
                      <FormDescription>
                        The official name of your organization
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="slug"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Organization Slug</FormLabel>
                      <FormControl>
                        <div className="relative">
                          <Input
                            placeholder="organization-slug"
                            {...field}
                            onChange={(e) => {
                              isSlugAutoGeneratedRef.current = false; // User manually edited
                              field.onChange(e);
                            }}
                            className={cn(
                              slugStatus === "taken" && "border-red-500",
                              slugStatus === "available" && "border-green-500"
                            )}
                          />
                          {slugStatusIcon && (
                            <div className="absolute right-3 top-1/2 -translate-y-1/2">
                              {slugStatusIcon}
                            </div>
                          )}
                        </div>
                      </FormControl>
                      <FormDescription>
                        Unique identifier for URLs (auto-generated from name)
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              <FormField
                control={form.control}
                name="logo"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Organization Logo</FormLabel>
                    <FormControl>
                      <FileUpload
                        onUpload={handleLogoUpload}
                        onRemove={handleLogoRemove}
                        accept="image/*"
                        maxSize={5 * 1024 * 1024} // 5MB
                        value={field.value}
                        disabled={isLoading}
                        placeholder="Upload organization logo (optional)"
                      />
                    </FormControl>
                    <FormDescription>
                      Upload a logo for your organization (PNG, JPG, SVG or
                      WebP)
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>

            {/* Hidden organization type field */}
            <FormField
              control={form.control}
              name="type"
              render={({ field }) => (
                <FormItem className="hidden">
                  <FormLabel>Organization Type</FormLabel>
                  <Select
                    onValueChange={field.onChange}
                    defaultValue={field.value}
                  >
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="Select organization type" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      <SelectItem value="client">Client</SelectItem>
                      <SelectItem value="admin">Admin</SelectItem>
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />
          </CardContent>
        </Card>
        <div className="grid grid-cols-1 lg:grid-cols-10 gap-6">
          {/* Contact Information */}
          <Card className="col-span-3">
            <CardHeader>
              <CardTitle>Contact Information</CardTitle>
              <CardDescription>
                Primary contact details for the organization
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="grid grid-cols-1 gap-6">
                <FormField
                  control={form.control}
                  name="contactEmail"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Contact Email</FormLabel>
                      <FormControl>
                        <Input
                          type="email"
                          placeholder="contact@organization.com"
                          {...field}
                        />
                      </FormControl>
                      <FormDescription>
                        Primary email for organization communications
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="contactPhone"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Contact Phone</FormLabel>
                      <FormControl>
                        <Input
                          type="tel"
                          placeholder="+1 (555) 123-4567"
                          {...field}
                        />
                      </FormControl>
                      <FormDescription>
                        Primary phone number for the organization
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
            </CardContent>
          </Card>

          {/* Address Information */}
          <Card className="col-span-7">
            <CardHeader>
              <CardTitle>Address Information</CardTitle>
              <CardDescription>Physical location details</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <FormField
                  control={form.control}
                  name="addressLine1"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Address Line 1</FormLabel>
                      <FormControl>
                        <Input placeholder="123 Main Street" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="addressLine2"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Address Line 2 (Optional)</FormLabel>
                      <FormControl>
                        <Input placeholder="Suite 100" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
              <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
                <FormField
                  control={form.control}
                  name="city"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>City</FormLabel>
                      <FormControl>
                        <Input placeholder="New York" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="state"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>State/Province</FormLabel>
                      <FormControl>
                        <Input placeholder="NY" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="postalCode"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Postal Code</FormLabel>
                      <FormControl>
                        <Input placeholder="10001" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="country"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Country</FormLabel>
                      <Select
                        onValueChange={field.onChange}
                        defaultValue={field.value}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select a country" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="United States">
                            United States
                          </SelectItem>
                          <SelectItem value="Canada">Canada</SelectItem>
                          <SelectItem value="United Kingdom">
                            United Kingdom
                          </SelectItem>
                          <SelectItem value="Australia">Australia</SelectItem>
                          <SelectItem value="Germany">Germany</SelectItem>
                          <SelectItem value="France">France</SelectItem>
                          <SelectItem value="Spain">Spain</SelectItem>
                          <SelectItem value="Italy">Italy</SelectItem>
                          <SelectItem value="Netherlands">
                            Netherlands
                          </SelectItem>
                          <SelectItem value="Switzerland">
                            Switzerland
                          </SelectItem>
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="timezone"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Timezone</FormLabel>
                      <Select
                        onValueChange={field.onChange}
                        defaultValue={field.value}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select a timezone" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="America/New_York">
                            Eastern Time (ET)
                          </SelectItem>
                          <SelectItem value="America/Chicago">
                            Central Time (CT)
                          </SelectItem>
                          <SelectItem value="America/Denver">
                            Mountain Time (MT)
                          </SelectItem>
                          <SelectItem value="America/Los_Angeles">
                            Pacific Time (PT)
                          </SelectItem>
                          <SelectItem value="America/Phoenix">
                            Arizona Time
                          </SelectItem>
                          <SelectItem value="America/Anchorage">
                            Alaska Time
                          </SelectItem>
                          <SelectItem value="Pacific/Honolulu">
                            Hawaii Time
                          </SelectItem>
                          <SelectItem value="Europe/London">
                            London (GMT)
                          </SelectItem>
                          <SelectItem value="Europe/Paris">
                            Paris (CET)
                          </SelectItem>
                          <SelectItem value="Asia/Tokyo">
                            Tokyo (JST)
                          </SelectItem>
                          <SelectItem value="Australia/Sydney">
                            Sydney (AEDT)
                          </SelectItem>
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
            </CardContent>
          </Card>
        </div>

        {/* HIPAA Compliance */}
        <Card>
          <CardHeader>
            <CardTitle>HIPAA Compliance</CardTitle>
            <CardDescription>
              Required information for HIPAA compliance
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <FormField
                control={form.control}
                name="hipaaOfficer"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>HIPAA Compliance Officer</FormLabel>
                    <FormControl>
                      <Input placeholder="John Doe" {...field} />
                    </FormControl>
                    <FormDescription>
                      Name of the designated HIPAA compliance officer
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="dataRetentionYears"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Data Retention Period (Years)</FormLabel>
                    <Select
                      onValueChange={field.onChange}
                      defaultValue={field.value}
                    >
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Select retention period" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="1">1 Year</SelectItem>
                        <SelectItem value="3">3 Years</SelectItem>
                        <SelectItem value="5">5 Years</SelectItem>
                        <SelectItem value="7">
                          7 Years (HIPAA Recommended)
                        </SelectItem>
                        <SelectItem value="10">10 Years</SelectItem>
                        <SelectItem value="indefinite">Indefinite</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormDescription>
                      How long to retain patient health information
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>

            <FormField
              control={form.control}
              name="businessAssociateAgreement"
              render={({ field }) => (
                <FormItem className="flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4">
                  <FormControl>
                    <Checkbox
                      checked={field.value}
                      onCheckedChange={field.onChange}
                    />
                  </FormControl>
                  <div className="space-y-1 leading-none">
                    <FormLabel>Business Associate Agreement (BAA)</FormLabel>
                    <FormDescription>
                      I confirm that a Business Associate Agreement has been
                      signed with this organization
                    </FormDescription>
                  </div>
                </FormItem>
              )}
            />
          </CardContent>
        </Card>

        {/* Form Actions */}
        <div className="flex items-center justify-end space-x-4">
          <Button
            variant="outline"
            onClick={() => router.push("/admin/organizations")}
            disabled={isLoading}
            type="button"
          >
            Cancel
          </Button>
          <Button type="submit" disabled={isLoading || slugStatus === "taken"}>
            {isLoading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
            {mode === "create" ? "Create Organization" : "Update Organization"}
          </Button>
        </div>
      </form>
    </Form>
  );
}
